/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/service/{serviceid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serviceid: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            microserviceID?: string;
                            microservice_name: string;
                            microservice_namespace: string;
                            virtualization: string;
                            memory?: number;
                            vcpus?: number;
                            vgpus?: number;
                            vtpus?: number;
                            bandwidth_in?: number;
                            bandwidth_out?: number;
                            storage?: number;
                            code: string;
                            state?: string;
                            port?: string;
                            /** @default false */
                            one_shot: boolean;
                            /** @default false */
                            privileged: boolean;
                            cmd?: string[];
                            environment?: string[];
                            sla_violation_strategy?: string;
                            target_node?: string;
                            addresses?: {
                                rr_ip?: string;
                                rr_ip_v6?: string;
                                closest_ip?: string;
                                closest_ip_v6?: string;
                                instances?: {
                                    from?: string;
                                    to?: string;
                                    start?: string;
                                }[];
                            };
                            added_files?: string[];
                            args?: string[];
                            constraints?: {
                                type: string;
                                area?: string;
                                cluster?: string;
                                node?: string;
                                location?: string;
                                threshold?: number;
                                rigidness?: number;
                                convergence_time?: number;
                                needs?: string[];
                                allowed?: string[];
                            }[];
                            connectivity?: {
                                target_microservice_id: string;
                                con_constraints: {
                                    type: string;
                                    threshold: number;
                                    rigidness: number;
                                    convergence_time: number;
                                }[];
                            }[];
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        sla_version: string;
                        customerID: string;
                        applications: {
                            applicationID?: string;
                            application_name: string;
                            application_namespace: string;
                            application_desc?: string;
                            microservices: {
                                microserviceID?: string;
                                microservice_name: string;
                                microservice_namespace: string;
                                virtualization: string;
                                memory?: number;
                                vcpus?: number;
                                vgpus?: number;
                                vtpus?: number;
                                bandwidth_in?: number;
                                bandwidth_out?: number;
                                storage?: number;
                                code: string;
                                state?: string;
                                port?: string;
                                /** @default false */
                                one_shot?: boolean;
                                /** @default false */
                                privileged?: boolean;
                                cmd?: string[];
                                environment?: string[];
                                sla_violation_strategy?: string;
                                target_node?: string;
                                addresses?: {
                                    rr_ip?: string;
                                    rr_ip_v6?: string;
                                    closest_ip?: string;
                                    closest_ip_v6?: string;
                                    instances?: {
                                        from?: string;
                                        to?: string;
                                        start?: string;
                                    }[];
                                };
                                added_files?: string[];
                                args?: string[];
                                constraints?: {
                                    type: string;
                                    area?: string;
                                    cluster?: string;
                                    node?: string;
                                    location?: string;
                                    threshold?: number;
                                    rigidness?: number;
                                    convergence_time?: number;
                                    needs?: string[];
                                    allowed?: string[];
                                }[];
                                connectivity?: {
                                    target_microservice_id: string;
                                    con_constraints: {
                                        type: string;
                                        threshold: number;
                                        rigidness: number;
                                        convergence_time: number;
                                    }[];
                                }[];
                            }[];
                        }[];
                        args?: string[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/service/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        sla_version: string;
                        customerID: string;
                        applications: {
                            applicationID?: string;
                            application_name: string;
                            application_namespace: string;
                            application_desc?: string;
                            microservices: {
                                microserviceID?: string;
                                microservice_name: string;
                                microservice_namespace: string;
                                virtualization: string;
                                memory?: number;
                                vcpus?: number;
                                vgpus?: number;
                                vtpus?: number;
                                bandwidth_in?: number;
                                bandwidth_out?: number;
                                storage?: number;
                                code: string;
                                state?: string;
                                port?: string;
                                /** @default false */
                                one_shot?: boolean;
                                /** @default false */
                                privileged?: boolean;
                                cmd?: string[];
                                environment?: string[];
                                sla_violation_strategy?: string;
                                target_node?: string;
                                addresses?: {
                                    rr_ip?: string;
                                    rr_ip_v6?: string;
                                    closest_ip?: string;
                                    closest_ip_v6?: string;
                                    instances?: {
                                        from?: string;
                                        to?: string;
                                        start?: string;
                                    }[];
                                };
                                added_files?: string[];
                                args?: string[];
                                constraints?: {
                                    type: string;
                                    area?: string;
                                    cluster?: string;
                                    node?: string;
                                    location?: string;
                                    threshold?: number;
                                    rigidness?: number;
                                    convergence_time?: number;
                                    needs?: string[];
                                    allowed?: string[];
                                }[];
                                connectivity?: {
                                    target_microservice_id: string;
                                    con_constraints: {
                                        type: string;
                                        threshold: number;
                                        rigidness: number;
                                        convergence_time: number;
                                    }[];
                                }[];
                            }[];
                        }[];
                        args?: string[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/services/{appid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appid: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            microserviceID?: string;
                            microservice_name: string;
                            microservice_namespace: string;
                            virtualization: string;
                            memory?: number;
                            vcpus?: number;
                            vgpus?: number;
                            vtpus?: number;
                            bandwidth_in?: number;
                            bandwidth_out?: number;
                            storage?: number;
                            code: string;
                            state?: string;
                            port?: string;
                            /** @default false */
                            one_shot: boolean;
                            /** @default false */
                            privileged: boolean;
                            cmd?: string[];
                            environment?: string[];
                            sla_violation_strategy?: string;
                            target_node?: string;
                            addresses?: {
                                rr_ip?: string;
                                rr_ip_v6?: string;
                                closest_ip?: string;
                                closest_ip_v6?: string;
                                instances?: {
                                    from?: string;
                                    to?: string;
                                    start?: string;
                                }[];
                            };
                            added_files?: string[];
                            args?: string[];
                            constraints?: {
                                type: string;
                                area?: string;
                                cluster?: string;
                                node?: string;
                                location?: string;
                                threshold?: number;
                                rigidness?: number;
                                convergence_time?: number;
                                needs?: string[];
                                allowed?: string[];
                            }[];
                            connectivity?: {
                                target_microservice_id: string;
                                con_constraints: {
                                    type: string;
                                    threshold: number;
                                    rigidness: number;
                                    convergence_time: number;
                                }[];
                            }[];
                        }[];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            microserviceID?: string;
                            microservice_name: string;
                            microservice_namespace: string;
                            virtualization: string;
                            memory?: number;
                            vcpus?: number;
                            vgpus?: number;
                            vtpus?: number;
                            bandwidth_in?: number;
                            bandwidth_out?: number;
                            storage?: number;
                            code: string;
                            state?: string;
                            port?: string;
                            /** @default false */
                            one_shot: boolean;
                            /** @default false */
                            privileged: boolean;
                            cmd?: string[];
                            environment?: string[];
                            sla_violation_strategy?: string;
                            target_node?: string;
                            addresses?: {
                                rr_ip?: string;
                                rr_ip_v6?: string;
                                closest_ip?: string;
                                closest_ip_v6?: string;
                                instances?: {
                                    from?: string;
                                    to?: string;
                                    start?: string;
                                }[];
                            };
                            added_files?: string[];
                            args?: string[];
                            constraints?: {
                                type: string;
                                area?: string;
                                cluster?: string;
                                node?: string;
                                location?: string;
                                threshold?: number;
                                rigidness?: number;
                                convergence_time?: number;
                                needs?: string[];
                                allowed?: string[];
                            }[];
                            connectivity?: {
                                target_microservice_id: string;
                                con_constraints: {
                                    type: string;
                                    threshold: number;
                                    rigidness: number;
                                    convergence_time: number;
                                }[];
                            }[];
                        }[];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/permission/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            roles?: string[];
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        username?: string;
                        password?: string;
                        organization?: string;
                    };
                };
            };
            responses: {
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        password?: string;
                        roles?: string[];
                    };
                };
            };
            responses: {
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/service/{serviceid}/instance": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serviceid: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/service/{serviceid}/instance/{instance_number}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serviceid: string;
                instance_number: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceid: string;
                    instance_number: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/application/{appid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appid: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sla_version: string;
                            customerID: string;
                            applications: {
                                applicationID?: string;
                                application_name: string;
                                application_namespace: string;
                                application_desc?: string;
                                microservices: {
                                    microserviceID?: string;
                                    microservice_name: string;
                                    microservice_namespace: string;
                                    virtualization: string;
                                    memory?: number;
                                    vcpus?: number;
                                    vgpus?: number;
                                    vtpus?: number;
                                    bandwidth_in?: number;
                                    bandwidth_out?: number;
                                    storage?: number;
                                    code: string;
                                    state?: string;
                                    port?: string;
                                    /** @default false */
                                    one_shot: boolean;
                                    /** @default false */
                                    privileged: boolean;
                                    cmd?: string[];
                                    environment?: string[];
                                    sla_violation_strategy?: string;
                                    target_node?: string;
                                    addresses?: {
                                        rr_ip?: string;
                                        rr_ip_v6?: string;
                                        closest_ip?: string;
                                        closest_ip_v6?: string;
                                        instances?: {
                                            from?: string;
                                            to?: string;
                                            start?: string;
                                        }[];
                                    };
                                    added_files?: string[];
                                    args?: string[];
                                    constraints?: {
                                        type: string;
                                        area?: string;
                                        cluster?: string;
                                        node?: string;
                                        location?: string;
                                        threshold?: number;
                                        rigidness?: number;
                                        convergence_time?: number;
                                        needs?: string[];
                                        allowed?: string[];
                                    }[];
                                    connectivity?: {
                                        target_microservice_id: string;
                                        con_constraints: {
                                            type: string;
                                            threshold: number;
                                            rigidness: number;
                                            convergence_time: number;
                                        }[];
                                    }[];
                                }[];
                            }[];
                            args?: string[];
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/application/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        sla_version: string;
                        customerID: string;
                        applications: {
                            applicationID?: string;
                            application_name: string;
                            application_namespace: string;
                            application_desc?: string;
                            microservices: {
                                microserviceID?: string;
                                microservice_name: string;
                                microservice_namespace: string;
                                virtualization: string;
                                memory?: number;
                                vcpus?: number;
                                vgpus?: number;
                                vtpus?: number;
                                bandwidth_in?: number;
                                bandwidth_out?: number;
                                storage?: number;
                                code: string;
                                state?: string;
                                port?: string;
                                /** @default false */
                                one_shot?: boolean;
                                /** @default false */
                                privileged?: boolean;
                                cmd?: string[];
                                environment?: string[];
                                sla_violation_strategy?: string;
                                target_node?: string;
                                addresses?: {
                                    rr_ip?: string;
                                    rr_ip_v6?: string;
                                    closest_ip?: string;
                                    closest_ip_v6?: string;
                                    instances?: {
                                        from?: string;
                                        to?: string;
                                        start?: string;
                                    }[];
                                };
                                added_files?: string[];
                                args?: string[];
                                constraints?: {
                                    type: string;
                                    area?: string;
                                    cluster?: string;
                                    node?: string;
                                    location?: string;
                                    threshold?: number;
                                    rigidness?: number;
                                    convergence_time?: number;
                                    needs?: string[];
                                    allowed?: string[];
                                }[];
                                connectivity?: {
                                    target_microservice_id: string;
                                    con_constraints: {
                                        type: string;
                                        threshold: number;
                                        rigidness: number;
                                        convergence_time: number;
                                    }[];
                                }[];
                            }[];
                        }[];
                        args?: string[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sla_version: string;
                            customerID: string;
                            applications: {
                                applicationID?: string;
                                application_name: string;
                                application_namespace: string;
                                application_desc?: string;
                                microservices: {
                                    microserviceID?: string;
                                    microservice_name: string;
                                    microservice_namespace: string;
                                    virtualization: string;
                                    memory?: number;
                                    vcpus?: number;
                                    vgpus?: number;
                                    vtpus?: number;
                                    bandwidth_in?: number;
                                    bandwidth_out?: number;
                                    storage?: number;
                                    code: string;
                                    state?: string;
                                    port?: string;
                                    /** @default false */
                                    one_shot: boolean;
                                    /** @default false */
                                    privileged: boolean;
                                    cmd?: string[];
                                    environment?: string[];
                                    sla_violation_strategy?: string;
                                    target_node?: string;
                                    addresses?: {
                                        rr_ip?: string;
                                        rr_ip_v6?: string;
                                        closest_ip?: string;
                                        closest_ip_v6?: string;
                                        instances?: {
                                            from?: string;
                                            to?: string;
                                            start?: string;
                                        }[];
                                    };
                                    added_files?: string[];
                                    args?: string[];
                                    constraints?: {
                                        type: string;
                                        area?: string;
                                        cluster?: string;
                                        node?: string;
                                        location?: string;
                                        threshold?: number;
                                        rigidness?: number;
                                        convergence_time?: number;
                                        needs?: string[];
                                        allowed?: string[];
                                    }[];
                                    connectivity?: {
                                        target_microservice_id: string;
                                        con_constraints: {
                                            type: string;
                                            threshold: number;
                                            rigidness: number;
                                            convergence_time: number;
                                        }[];
                                    }[];
                                }[];
                            }[];
                            args?: string[];
                        }[];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/applications/{userid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userid: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sla_version: string;
                            customerID: string;
                            applications: {
                                applicationID?: string;
                                application_name: string;
                                application_namespace: string;
                                application_desc?: string;
                                microservices: {
                                    microserviceID?: string;
                                    microservice_name: string;
                                    microservice_namespace: string;
                                    virtualization: string;
                                    memory?: number;
                                    vcpus?: number;
                                    vgpus?: number;
                                    vtpus?: number;
                                    bandwidth_in?: number;
                                    bandwidth_out?: number;
                                    storage?: number;
                                    code: string;
                                    state?: string;
                                    port?: string;
                                    /** @default false */
                                    one_shot: boolean;
                                    /** @default false */
                                    privileged: boolean;
                                    cmd?: string[];
                                    environment?: string[];
                                    sla_violation_strategy?: string;
                                    target_node?: string;
                                    addresses?: {
                                        rr_ip?: string;
                                        rr_ip_v6?: string;
                                        closest_ip?: string;
                                        closest_ip_v6?: string;
                                        instances?: {
                                            from?: string;
                                            to?: string;
                                            start?: string;
                                        }[];
                                    };
                                    added_files?: string[];
                                    args?: string[];
                                    constraints?: {
                                        type: string;
                                        area?: string;
                                        cluster?: string;
                                        node?: string;
                                        location?: string;
                                        threshold?: number;
                                        rigidness?: number;
                                        convergence_time?: number;
                                        needs?: string[];
                                        allowed?: string[];
                                    }[];
                                    connectivity?: {
                                        target_microservice_id: string;
                                        con_constraints: {
                                            type: string;
                                            threshold: number;
                                            rigidness: number;
                                            convergence_time: number;
                                        }[];
                                    }[];
                                }[];
                            }[];
                            args?: string[];
                        }[];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/applications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sla_version: string;
                            customerID: string;
                            applications: {
                                applicationID?: string;
                                application_name: string;
                                application_namespace: string;
                                application_desc?: string;
                                microservices: {
                                    microserviceID?: string;
                                    microservice_name: string;
                                    microservice_namespace: string;
                                    virtualization: string;
                                    memory?: number;
                                    vcpus?: number;
                                    vgpus?: number;
                                    vtpus?: number;
                                    bandwidth_in?: number;
                                    bandwidth_out?: number;
                                    storage?: number;
                                    code: string;
                                    state?: string;
                                    port?: string;
                                    /** @default false */
                                    one_shot: boolean;
                                    /** @default false */
                                    privileged: boolean;
                                    cmd?: string[];
                                    environment?: string[];
                                    sla_violation_strategy?: string;
                                    target_node?: string;
                                    addresses?: {
                                        rr_ip?: string;
                                        rr_ip_v6?: string;
                                        closest_ip?: string;
                                        closest_ip_v6?: string;
                                        instances?: {
                                            from?: string;
                                            to?: string;
                                            start?: string;
                                        }[];
                                    };
                                    added_files?: string[];
                                    args?: string[];
                                    constraints?: {
                                        type: string;
                                        area?: string;
                                        cluster?: string;
                                        node?: string;
                                        location?: string;
                                        threshold?: number;
                                        rigidness?: number;
                                        convergence_time?: number;
                                        needs?: string[];
                                        allowed?: string[];
                                    }[];
                                    connectivity?: {
                                        target_microservice_id: string;
                                        con_constraints: {
                                            type: string;
                                            threshold: number;
                                            rigidness: number;
                                            convergence_time: number;
                                        }[];
                                    }[];
                                }[];
                            }[];
                            args?: string[];
                        }[];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organization_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/result/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        job_id?: string;
                        cluster_id?: string;
                    };
                };
            };
            responses: {
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/information/{clusterid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clusterid: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    clusterid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        cpu_percent?: string;
                        cpu_cores?: string;
                        gpu_cores?: string;
                        gpu_percent?: string;
                        cumulative_memory_in_mb?: string;
                        number_of_nodes?: string;
                        virtualization?: string[];
                        more?: Record<string, never>;
                        worker_groups?: string;
                        supported_addons?: string[];
                        jobs?: {
                            system_job_id?: string;
                            status?: string;
                            instance_list?: {
                                instance_number?: string;
                                status?: string;
                                status_detail?: string;
                                publicip?: string;
                            }[];
                        }[];
                    };
                };
            };
            responses: {
                422: components["responses"]["UNPROCESSABLE_ENTITY"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/clusters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/clusters/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/{organizationid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organizationid: string;
            };
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organizationid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    organizationid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/organization/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            name?: string;
                            member?: string[];
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            name?: string;
                            member?: string[];
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code?: number;
            /** @description Error name */
            status?: string;
            /** @description Errors */
            errors?: Record<string, never>;
            /** @description Error message */
            message?: string;
        };
        PaginationMetadata: {
            total?: number;
            total_pages?: number;
            first_page?: number;
            last_page?: number;
            page?: number;
            previous_page?: number;
            next_page?: number;
        };
    };
    responses: {
        /** @description Default error response */
        DEFAULT_ERROR: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable Entity */
        UNPROCESSABLE_ENTITY: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
