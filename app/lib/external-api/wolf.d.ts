/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all apps
         * @description This endpoint returns a list of all apps.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__AppListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paired clients
         * @description This endpoint returns a list of all paired clients.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__PairedClientsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to events
         * @description This endpoint allows clients to subscribe to events using SSE
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/openapi-schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return this OpenAPI schema as JSON */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/pair/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pending pair requests
         * @description This endpoint returns a list of Moonlight clients that are currently waiting to be paired.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__PendingPairRequestsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all stream sessions
         * @description This endpoint returns a list of all active stream sessions.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__StreamSessionListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apps/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add an app */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["rfl__Reflector_wolf__core__events__App___ReflType"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/apps/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove an app */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__AppDeleteRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update client settings
         * @description Update a client's settings including app state folder and client-specific settings
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__UpdateClientSettingsRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/pair/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pair a client */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__PairRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/runners/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a runner in a given session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__RunnerStartRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new stream session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["rfl__Reflector_wolf__core__events__StreamSession___ReflType"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__StreamSessionCreated"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/input": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Handle input for a stream session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__StreamSessionHandleInputRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause a stream session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__StreamSessionPauseRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a stream session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__StreamSessionStartRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop a stream session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__StreamSessionStopRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/unpair/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unpair a client */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["wolf__api__UnpairClientRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericSuccessResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["wolf__api__GenericErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        rfl__Reflector_wolf__core__events__App___ReflType: {
            av1_gst_pipeline: string;
            h264_gst_pipeline: string;
            hevc_gst_pipeline: string;
            icon_png_path?: string | null;
            id: string;
            opus_gst_pipeline: string;
            render_node: string;
            runner: components["schemas"]["wolf__config__AppCMD__tagged"] | components["schemas"]["wolf__config__AppDocker__tagged"] | components["schemas"]["wolf__config__AppChildSession__tagged"];
            start_audio_server: boolean;
            start_virtual_compositor: boolean;
            support_hdr: boolean;
            title: string;
        };
        rfl__Reflector_wolf__core__events__StreamSession___ReflType: {
            app_id: string;
            audio_channel_count: number;
            client_id: string;
            client_ip: string;
            client_settings: components["schemas"]["wolf__config__ClientSettings"];
            video_height: number;
            video_refresh_rate: number;
            video_width: number;
        };
        wolf__api__AppDeleteRequest: {
            id: string;
        };
        wolf__api__AppListResponse: {
            apps: components["schemas"]["rfl__Reflector_wolf__core__events__App___ReflType"][];
            success: boolean;
        };
        wolf__api__GenericErrorResponse: {
            error: string;
            success: boolean;
        };
        wolf__api__GenericSuccessResponse: {
            success: boolean;
        };
        wolf__api__PairRequest: {
            pair_secret: string;
            /** @description The PIN created by the remote Moonlight client */
            pin: string;
        };
        wolf__api__PairedClient: {
            app_state_folder: string;
            client_id: string;
            settings: components["schemas"]["wolf__config__ClientSettings"];
        };
        wolf__api__PairedClientsResponse: {
            clients: components["schemas"]["wolf__api__PairedClient"][];
            success: boolean;
        };
        wolf__api__PartialClientSettings: {
            controllers_override?: ("XBOX" | "PS" | "NINTENDO" | "AUTO")[] | null;
            h_scroll_acceleration?: number | null;
            mouse_acceleration?: number | null;
            run_gid?: number | null;
            run_uid?: number | null;
            v_scroll_acceleration?: number | null;
        };
        wolf__api__PendingPairClient: {
            /** @description The IP of the remote Moonlight client */
            client_ip: string;
            pair_secret: string;
        };
        wolf__api__PendingPairRequestsResponse: {
            requests: components["schemas"]["wolf__api__PendingPairClient"][];
            success: boolean;
        };
        wolf__api__RunnerStartRequest: {
            runner: components["schemas"]["wolf__config__AppCMD__tagged"] | components["schemas"]["wolf__config__AppDocker__tagged"] | components["schemas"]["wolf__config__AppChildSession__tagged"];
            session_id: string;
            stop_stream_when_over: boolean;
        };
        wolf__api__StreamSessionCreated: {
            session_id: string;
            success: boolean;
        };
        wolf__api__StreamSessionHandleInputRequest: {
            /** @description A HEX encoded Moonlight input packet, for the full format see: games-on-whales.github.io/wolf/stable/protocols/input-data.html */
            input_packet_hex: string;
            session_id: string;
        };
        wolf__api__StreamSessionListResponse: {
            sessions: components["schemas"]["rfl__Reflector_wolf__core__events__StreamSession___ReflType"][];
            success: boolean;
        };
        wolf__api__StreamSessionPauseRequest: {
            session_id: string;
        };
        wolf__api__StreamSessionStartRequest: {
            audio_session: components["schemas"]["wolf__core__events__AudioSession"];
            session_id: string;
            video_session: components["schemas"]["wolf__core__events__VideoSession"];
        };
        wolf__api__StreamSessionStopRequest: {
            session_id: string;
        };
        wolf__api__UnpairClientRequest: {
            /** @description The client ID to unpair */
            client_id: string;
        };
        wolf__api__UpdateClientSettingsRequest: {
            /** @description New app state folder path (optional) */
            app_state_folder: string | null;
            /** @description The client ID to identify the client (derived from certificate) */
            client_id: string;
            /** @description Client settings to update (only specified fields will be updated) */
            settings: components["schemas"]["wolf__api__PartialClientSettings"] | null;
        };
        wolf__config__AppCMD__tagged: {
            run_cmd: string;
            /** @enum {string} */
            type: "process";
        };
        wolf__config__AppChildSession__tagged: {
            parent_session_id: string;
            /** @enum {string} */
            type: "child_session";
        };
        wolf__config__AppDocker__tagged: {
            base_create_json?: string | null;
            devices: string[];
            env: string[];
            image: string;
            mounts: string[];
            name: string;
            ports: string[];
            /** @enum {string} */
            type: "docker";
        };
        wolf__config__ClientSettings: {
            controllers_override: ("XBOX" | "PS" | "NINTENDO" | "AUTO")[];
            h_scroll_acceleration: number;
            mouse_acceleration: number;
            run_gid: number;
            run_uid: number;
            v_scroll_acceleration: number;
        };
        wolf__core__audio__AudioMode: {
            bitrate: number;
            channels: number;
            coupled_streams: number;
            sample_rate: number;
            speakers: ("FRONT_LEFT" | "FRONT_RIGHT" | "FRONT_CENTER" | "LOW_FREQUENCY" | "BACK_LEFT" | "BACK_RIGHT" | "SIDE_LEFT" | "SIDE_RIGHT" | "MAX_SPEAKERS")[];
            streams: number;
        };
        wolf__core__events__AudioSession: {
            aes_iv: string;
            aes_key: string;
            audio_mode: components["schemas"]["wolf__core__audio__AudioMode"];
            client_ip: string;
            encrypt_audio: boolean;
            gst_pipeline: string;
            packet_duration: number;
            port: number;
            session_id: number;
            wait_for_ping: boolean;
        };
        wolf__core__events__VideoSession: {
            bitrate_kbps: number;
            client_ip: string;
            /** @enum {string} */
            color_range: "JPEG" | "MPEG";
            /** @enum {string} */
            color_space: "BT601" | "BT709" | "BT2020";
            display_mode: components["schemas"]["wolf__core__virtual_display__DisplayMode"];
            fec_percentage: number;
            frames_with_invalid_ref_threshold: number;
            gst_pipeline: string;
            min_required_fec_packets: number;
            packet_size: number;
            port: number;
            session_id: number;
            slices_per_frame: number;
            timeout_ms: number;
            wait_for_ping: boolean;
        };
        wolf__core__virtual_display__DisplayMode: {
            height: number;
            refreshRate: number;
            width: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
